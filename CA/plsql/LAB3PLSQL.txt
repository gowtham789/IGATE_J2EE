
											LAB3 PLSQL


		
		
1.      --WITHOUT USING CURSOR
    DECLARE
	 staffsal STAFF_MASTER.STAFF_SAL%TYPE;
	 dcode STAFF_MASTER.DEPT_CODE%TYPE;
	 
	 BEGIN
		dcode:=&dcode;
	  SELECT MAX(STAFF_SAL) INTO staffsal
		FROM STAFF_MASTER 
		WHERE DEPT_CODE=dcode;
	   DBMS_OUTPUT.PUT_LINE ('STAFF CODE   ' || dcode  ||'MAXIMUM SALARY  ' || staffsal);
	   
	   END;
	   
	 -- USING CURSOR
	 
	 CREATE OR REPLACE PROCEDURE maxsal(DEPTNO IN NUMBER, SALARY OUT NUMBER)
	   AS	
				CURSOR cname(DNO NUMBER) IS SELECT MAX(STAFF_SAL)
													FROM STAFF_MASTER WHERE DEPT_CODE=DEPTNO;
													
			BEGIN
			      OPEN cname(DEPTNO);
				  FETCH cname INTO SALARY;
	              CLOSE cname;
	 END maxsal;
	 
	 -------------------------------------
	 DECLARE SALARY NUMBER(6);
	 BEGIN
	 maxsal(&DEPTNO, SALARY);
	 DBMS_OUTPUT.PUT_LINE ('MAXIMUM SALARY   '|| SALARY);
     END;	 
	 
2.  CREATE OR REPLACE FUNCTION GET_AGE(DOB IN DATE) RETURN NUMBER
	AS 
	  age NUMBER;
     BEGIN
	 age:= ROUND((SYSDATE-DOB)/365);
	 RETURN age;
	 END GET_AGE;
     -----------------------------------
	 SELECT GET_AGE('&STAFF_DOB') FROM DUAL;
	 
	 
3. CREATE OR REPLACE PROCEDURE pname(CODE IN NUMBER, NAME OUT VARCHAR)
	AS
	 BEGIN
	  SELECT UPPER(STAFF_NAME) INTO NAME FROM STAFF_MASTER WHERE STAFF_CODE=CODE;
	 
	END pname;
	------------------------------------
	DECLARE res VARCHAR2(20);
	BEGIN
	pname(&CODE,res);
	 DBMS_OUTPUT.PUT_LINE('STAFF NAME'|| res);
	END;

4. CREATE OR REPLACE PROCEDURE GET_MGR(SCODE IN NUMBER, SNAME OUT VARCHAR, MNAME OUT VARCHAR,DCODE OUT NUMBER)
    AS staff_no NUMBER(6);
	 BEGIN
	 SELECT S.STAFF_CODE, S.STAFF_NAME,SM.STAFF_NAME, S.DEPT_CODE INTO staff_no,SNAME,MNAME,DCODE
	     FROM STAFF_MASTER S, STAFF_MASTER SM WHERE SM.STAFF_CODE=S.MGR_CODE;

		 END GET_MGR;
	---------------------------------------
	DECLARE
		SCODE NUMBER(6);
    	SNAME VARCHAR2(30);
		MNAME VARCHAR2(30);
		DCODE NUMBER(6);
		
	BEGIN
	
	 GET_MGR(&SCODE, SNAME, MNAME, DCODE);
	  DBMS_OUTPUT.PUT_LINE('STAFF code'|| SCODE || ' STAFF NAME '|| SNAME ||
			'MANAGER NAME' || MNAME || 'DEPARTMENT CODE ' || DCODE);
	END;
	
5. CREATE OR REPLACE FUNCTION GET_COMPANYCOST(CODE NUMBER)
	RETURN NUMBER AS
	COST NUMBER(5);
	SALARY NUMBER(5);
	HIRE DATE;
	EXP NUMBER(2);
	BEGIN
		  COST:=0;
		  SELECT STAFF_SAL, HIREDATE INTO SALARY, HIRE FROM STAFF_MASTER WHERE STAFF_CODE=CODE;
		  EXP:=(SYSDATE-HIRE)/365;
		  COST:=COST+0.15*SALARY+0.20*SALARY+0.08*SALARY;
		  IF EXP>4 THEN
				COST:=COST+0.3*SALARY;
				ELSIF EXP>=2 AND EXP<4 THEN
						COST:=COST+0.2*SALARY;
				ELSIF EXP>=1 AND EXP<2 THEN
				        COST:=COST+0.1*SALARY;
				END IF;
			END IF;
		  END IF;
        RETURN COST;
	 END;
	 ------------------------------------
	DECLARE 
	COST NUMBER(6);
	BEGIN
	    COST:=GET_COMPANYCOST('&CODE');
		DBMS_OUTPUT.PUT_LINE(COST);
	END;
	
	
6.   CREATE OR REPLACE PROCEDURE GET_STATUS
	  AS
	      CODE STAFF_MASTER.STAFF_CODE%TYPE;
		  NAME STAFF_MASTER.STAFF_NAME%TYPE;
	      DNAME DEPARTMENT_MASTER.DEPT_NAME%TYPE;
		  DESIGNATION DESIGNATION_MASTER.DESIGN_NAME%TYPE;
		  SALARY STAFF_MASTER.STAFF_SAL%TYPE;
		  DCODE STAFF_MASTER.DEPT_CODE%TYPE;
		  
		  avgsal NUMBER(5);
		  STATUS varchar(7);
		  
	 CURSOR C IS SELECT S.STAFF_NAME, D.DEPT_NAME, DE.DESIGN_NAME, S.STAFF_SAL, S.DEPT_CODE
                 FROM STAFF_MASTER S, DEPARTMENT_MASTER D, DESIGNATION_MASTER DE
                  WHERE S.DEPT_CODE=D.DEPT_CODE
						AND S.DESIGN_CODE=DE.DESIGN_CODE;
	 BEGIN
	       OPEN C;
		   FETCH C INTO NAME, DNAME, DESIGNATION, SALARY, DCODE;
		    IF C%ROWCOUNT>0 THEN
			    DBMS_OUTPUT.PUT_LINE(C%ROWCOUNT);
			ELSE
			DBMS_OUTPUT.PUT_LINE('NOT EXISTS');
			END IF;
			
			WHILE C%FOUND
			   LOOP
			        FETCH C INTO NAME, DNAME, DESIGNATION, SALARY, DCODE;
					SELECT AVG(STAFF_SAL) INTO avgSal
					FROM STAFF_MASTER
					WHERE DEPT_CODE=DCODE
					GROUP BY DEPT_CODE;
					
					IF avgSal>SALARY THEN
					     STATUS:='LESSER';
						 ELSIF avgSal<SALARY THEN
						     STATUS:='GREATER';
							 ELSE
							  STATUS:='EQUAL';
							  END IF;
		
				DBMS_OUTPUT.PUT_LINE(NAME||'  ' ||DNAME||'  '||DESIGNATION || '  '|| SALARY ||'   '|| 'avgSal:' || avgSal ||'  '|| STATUS);
				
				
			END LOOP;
	    CLOSE C;
	END GET_STATUS;
	---------------------------------------------
	
	BEGIN
	    GET_STATUS;
	END;
	 
3.7

	CREATE TABLE STAFF_MASTER_BACK AS SELECT * FROM STAFF_MASTER;

	CREATE OR REPLACE PROCEDURE UPDATE_SAL(SCODE IN NUMBER)
	AS 
	  SALARY NUMBER;
	  EXP NUMBER;
	  HIRE DATE;
	  NEW_SAL NUMBER;
	BEGIN
	  SELECT STAFF_SAL INTO SALARY FROM STAFF_MASTER WHERE STAFF_CODE=SCODE;
	  EXP := (SYSDATE-HIRE)/365;
	  IF EXP<2 THEN
		NEW_SAL := SALARY + 0;
	  ELSIF EXP>=2 AND EXP<5 THEN
		NEW_SAL := SALARY + (20*SALARY/100);
	  ELSE
		NEW_SAL := SALARY + (25*SALARY/100);
	  END IF;
	  UPDATE STAFF_MASTER
		SET STAFF_SAL=NEW_SAL
		  WHERE STAFF_CODE=SCODE;
	END UPDATE_SAL;
	  
	SET SERVEROUTPUT ON;
	-------------------------------------------
	BEGIN
	 UPDATE_SAL(&SCODE);
	END;

3.8

	CREATE OR REPLACE PROCEDURE BOOKS(BCODE IN NUMBER)
	AS
	  SCODE NUMBER;
	  STUD_CODE NUMBER;
	  SNAME VARCHAR2(20);
	  STUD_NAME VARCHAR2(20);
	  IDATE DATE;
	  DESIGN VARCHAR2(20);
	  EXP_RET_DATE DATE;
	  ACT_RET_DATE DATE;
	  CURSOR CNAME IS SELECT STAFF_CODE,STUDENT_CODE,BOOK_ISSUE_DATE,BOOK_EXPECTED_RETURN_DATE,BOOK_ACTUAL_RETURN_DATE 
			 FROM BOOK_TRANSACTION
			   WHERE BOOK_CODE=BCODE;
	BEGIN
	  IF CNAME%ISOPEN THEN
	   NULL;
	  ELSE
	   OPEN CNAME;													--cursor opened
	  END IF;
	  FETCH CNAME INTO SCODE,STUD_CODE,IDATE,EXP_RET_DATE,ACT_RET_DATE;
	  WHILE CNAME%FOUND
	  LOOP
		IF (ACT_RET_DATE IS NULL) THEN
		  IF (SCODE IS NULL) THEN
		   SELECT STUDENT_NAME INTO STUD_NAME FROM STUDENT_MASTER WHERE STUDENT_CODE=STUD_CODE;
		   DBMS_OUTPUT.PUT_LINE('STUDENT- '||STUD_CODE||'  '||STUD_NAME||'  '||IDATE||'  '||EXP_RET_DATE);
		  END IF;
		  IF (STUD_CODE IS NULL) THEN
		   SELECT S.STAFF_NAME,D.DESIGN_NAME INTO SNAME,DESIGN
			  FROM STAFF_MASTER S,DESIGNATION_MASTER D
				  WHERE STAFF_CODE=SCODE AND
					S.DESIGN_CODE=D.DESIGN_CODE;
		   DBMS_OUTPUT.PUT_LINE('STAFF- '||SCODE||'  '||SNAME||'  '||IDATE||'  '||DESIGN||'  '||EXP_RET_DATE);
		  END IF;
		END IF;
		FETCH CNAME INTO SCODE,STUD_CODE,IDATE,EXP_RET_DATE,ACT_RET_DATE;
	  END LOOP;
	  CLOSE CNAME;
	END BOOKS;
	-----------------------------------------------------
	BEGIN
	  BOOKS(&CODE);
	END;
	
3.10
	  
	   CREATE OR REPLACE PROCEDURE INSERT_DETAILS(BCODE NUMBER, PCODE NUMBER)
	AS
	DOI DATE;
	DOR DATE;
	BEGIN
		DOI:=SYSDATE;
		DOR:=SYSDATE+10;
		IF(TO_CHAR(DOR,'DY')='SAT') THEN
			DOR:=DOR+2;
		ELSIF(TO_CHAR(DOR,'DY')='SUN') THEN
				DOR:=DOR+1;
		END IF;
		
		IF(PCODE>9999) THEN
			INSERT INTO BOOK_TRANSACTION
			VALUES(BCODE,NULL,PCODE,DOI,DOR,NULL);
		ELSE
			INSERT INTO BOOK_TRANSACTION
			VALUES(BCODE,PCODE,NULL,DOI,DOR,NULL);
		END IF;
	END;
	-------------------------------------------------------
	BEGIN
		INSERT_DETAILS(&BCODE,&PCODE);
	END;
	
	