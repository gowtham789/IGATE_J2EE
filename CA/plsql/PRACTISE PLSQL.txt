



practise eg's
1.
DECLARE
 staffdetails STAFF_MASTER %ROWTYPE;
BEGIN
 SELECT * INTO staffdetails
FROM STAFF_MASTER
WHERE STAFF_CODE=100001;
DBMS_OUTPUT.PUT_LINE('STAFF NAME'|| staffdetails.STAFF_NAME);
DBMS_OUTPUT.PUT_LINE('STAFF DOB'|| staffdetails.STAFF_DOB);
END;
/


2. DECLARE
 vcDname department_master.dept_name%TYPE;
 nDeptn0 department_master.dept_code%TYPE;
 BEGIN
 SELECT * INTO nDeptno,vcDname FROM department_master
 WHERE dept_code=&nDept_no;
DBMS_OUTPUT.PUT_LINE('Department code'|| nDeptno);
DBMS_OUTPUT.PUT_LINE('Department name'|| vcDname);
END;
/

3. 
DECLARE
  TYPE recname is RECORD(
   STAFF_NAME STAFF_MASTER.STAFF_NAME%TYPE,
   DESIGN_NAME DESIGNATION_MASTER.DESIGN_NAME%TYPE,
   DEPT_NAME DEPARTMENT_MASTER.DEPT_NAME%TYPE);
   varrec recname; --userdefined datatype

 BEGIN
  SELECT STAFF_NAME,DESIGN_NAME,DEPT_NAME INTO varrec
      FROM STAFF_MASTER S, DESIGNATION_MASTER D, DEPARTMENT_MASTER DEP
    WHERE S.DESIGN_CODE=D.DESIGN_CODE AND
          S.DEPT_CODE=DEP.DEPT_CODE AND STAFF_CODE=100001;

DBMS_OUTPUT.PUT_LINE(varrec.STAFF_NAME||''||varrec.DESIGN_NAME||''||varrec.DEPT_NAME);
END;
/



1

  DECLARE
  CURSOR cname is SELECT * FROM STAFF_MASTER WHERE DEPT_CODE='&DEPT_CODE';
		
	 BEGIN
	  FOR recstaff in cname
	  LOOP
	    DBMS_OUTPUT.PUT_LINE(recstaff.STAFF_NAME||''||recstaff.STAFF_CODE||''||recstaff.STAFF_SAL);
		END LOOP;
	END;
	

	

1.5 DECLARE
   empname EMPLOYEE.ENAME%TYPE;
   empno EMPLOYEE.EMPNO%TYPE;
   salary EMPLOYEE.SAL%TYPE;
   hiredate EMPLOYEE.HIREDATE%TYPE;
   dname DEPARTMENT_MASTER.DEPT_NAME%TYPE;

 BEGIN
  SELECT ENAME,SAL,HIREDATE,DEPT_NAME INTO empname,salary,hiredate,dname
		 FROM EMPLOYEE emp,DEPARTMENT_MASTER d
		 
		 where EMPNO='&EMPNO' AND emp.DEPTNO=d.DEPT_CODE;
		 
	DBMS_OUTPUT.PUT_LINE
	('EMPLOYEENAME' || empname || 'SALARY' || salary || 'HIREDATE' || hiredate ||
      	'DEPARTMENTNAME' || dname);
	EXCEPTION
	  WHEN NO_DATA_FOUND THEN 
	   DBMS_OUTPUT.PUT_LINE('SEARCHED DATA DOESNOT EXIST');
	  WHEN OTHERS THEN
	  DBMS_OUTPUT.PUT_LINE('ERROR DUE TO' ||SQLERRM);
  END;
  
  
10.  DECLARE 
		SCODE STUDENT_MASTER.STUDENT_CODE%TYPE;
	    SNAME STUDENT_MASTER.STUDENT_NAME%TYPE;
		DCODE STUDENT_MASTER.DEPT_CODE%TYPE;
		S1 STUDENT_MARKS.SUBJECT1%TYPE;
		S2 STUDENT_MARKS.SUBJECT2%TYPE;
		S3 STUDENT_MARKS.SUBJECT3%TYPE;
		GRADE STUDENT_MASTER.STUDENT_NAME%TYPE;
		TOTAL STUDENT_MARKS.SUBJECT1%TYPE;
		PERCENT STUDENT_MARKS.SUBJECT1%TYPE;
		DC VARCHAR2(2):=&DCODE;
		 CURSOR CNAME IS SELECT S.STUDENT_CODE, S.STUDENT_NAME, S.DEPT_CODE,
		    SM.SUBJECT1, SM.SUBJECT2, SM.SUBJECT3
			  FROM STUDENT_MASTER S, STUDENT_MARKS SM
			   WHERE SM.STUDENT_CODE=S.STUDENT_CODE AND S.DEPT_CODE=DC;
		empexception EXCEPTION; --EXCEPTION DECLARED
	  BEGIN
	   IF (DC<10 OR DC>50 OR MOD(DC,10)!=0)
	    THEN
	     RAISE empexception;
		END IF;
	  IF cname%ISOPEN THEN
	 null;
	 ELSE
	  OPEN cname;
     END IF;
	 FETCH CNAME INTO SCODE,SNAME,DCODE,S1,S2,S3;
	 WHILE CNAME%FOUND
	 LOOP
	   IF S1>=60 AND S2>=60 AND S3>=60 THEN 
	   TOTAL:=S1+S2+S3; 
	   PERCENT:= ROUND((S1+S2+S3)/3);
		IF PERCENT>=80
		  THEN GRADE:= 'A';
		 ELSIF PERCENT>=70 AND PERCENT<80		 
		 THEN GRADE:= 'B';
		 ELSIF PERCENT>=60 AND PERCENT<70
			THEN GRADE:='C';
		 ELSE GRADE:='D';
			END IF;
			
			 DBMS_OUTPUT.PUT_LINE('STUDENTCODE'|| SCODE);
		 DBMS_OUTPUT.PUT_LINE('STUDENTNAME'||SNAME);
		 DBMS_OUTPUT.PUT_LINE('DCODE' || DCODE);
		 DBMS_OUTPUT.PUT_LINE('SUBJECT1MARKS' || S1);
		 DBMS_OUTPUT.PUT_LINE('SUBJECT2MARKS'|| S2);
		 DBMS_OUTPUT.PUT_LINE('SUBJECT3MARKS'|| S3);
		 DBMS_OUTPUT.PUT_LINE('TOTALAMRKS' || TOTAL);
		 DBMS_OUTPUT.PUT_LINE('PERCENT' || PERCENT);
				 
		 END IF;
		 FETCH CNAME INTO SCODE,SNAME,DCODE,S1,S2,S3;
		 END LOOP;
		 EXCEPTION
		    WHEN empexception THEN
			DBMS_OUTPUT.PUT_LINE('SUCH DEPARTMENT NOT EXISTS');
		END;
		
		
1. /*procedures examples*/

    CREATE OR REPLACE PROCEDURE spsum(num1 IN NUMBER, num2 NUMBER)
	 AS result NUMBER;
	 BEGIN
	 result:=num1+num2;
	 DBMS_OUTPUT.PUT_LINE(result);
	 END spsum;
	 
	 /* to execute*/
	  BEGIN
	  spsum(&num1,&num2);
	 END;
	 
2.  



    CREATE OR REPLACE PROCEDURE spsum(num1 IN NUMBER, num2 NUMBER, num3 OUT NUMBER)
	 AS
	 BEGIN
	 num3:=num1+num2;
	 END spsum;
	 
	 /* to execute*/
	 DECLARE result NUMBER;
	  BEGIN
	  spsum(&num1,&num2,result);
	  DBMS_OUTPUT.PUT_LINE(result);
	 END;

	 
3. CREATE OR REPLACE FUNCTION fname(CODE IN NUMBER) RETURN varchar
	AS 
	  name varchar(20);
	 BEGIN
	  SELECT UPPER(STAFF_NAME) INTO name FROM STAFF_MASTER WHERE STAFF_CODE=CODE;
	  return name;
	END fname;
	
	SELECT fname(&CODE) FROM DUAL
/
