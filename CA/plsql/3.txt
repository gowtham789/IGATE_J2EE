1.	CREATE OR REPLACE PROCEDURE MAXSAL(DNO IN NUMBER, SAL OUT NUMBER)
	AS
	CURSOR C(DNO NUMBER) IS SELECT MAX(STAFF_SAL)
					FROM STAFF_MASTER
					WHERE DEPT_CODE=DNO;
	BEGIN
		OPEN C(DNO);
		FETCH C INTO SAL;
		CLOSE C;
	END MAXSAL;
	----------------------------------------------
	DECLARE
		SAL NUMBER(6);
	BEGIN
		MAXSAL(&DEPTCODE, SAL);
		DBMS_OUTPUT.PUT_LINE(SAL);
	END;

2.	CREATE FUNCTION GET_AGE(BDATE DATE)
	RETURN NUMBER AS
	BEGIN
		RETURN (SYSDATE-BDATE)/365;
	END GET_AGE;
	-------------------------------
	DECLARE 
	AGE NUMBER(3);
	BEGIN
		AGE:=GET_AGE('&BDATE');
		DBMS_OUTPUT.PUT_LINE(AGE);
	END;

3.	CREATE OR REPLACE PROCEDURE CHANGE_UPPER(CODE IN NUMBER)
	AS
	BEGIN
			UPDATE STAFF_MASTER
			SET STAFF_NAME=UPPER(STAFF_NAME)
			WHERE STAFF_CODE=CODE;
	END CHANGE_UPPER;
	-------------------------------
	DECLARE
	CODE NUMBER(10):=&code;
	BEGIN
	   CHANGE_UPPER(CODE);
	END;
	
4.	CREATE OR REPLACE PROCEDURE GET_MANAGER(SCODE IN NUMBER, CODE OUT NUMBER, NAME OUT VARCHAR, DEPT_CODE OUT NUMBER, MANAGER OUT VARCHAR)
	AS
	BEGIN
		SELECT S.STAFF_CODE, S.STAFF_NAME, S.DEPT_CODE, S1.STAFF_NAME
			INTO CODE, NAME, DEPT_CODE, MANAGER
		FROM STAFF_MASTER S, STAFF_MASTER S1
		WHERE S.STAFF_CODE=SCODE
			AND S.MGR_CODE=S1.STAFF_CODE;
	END GET_MANAGER;
	-------------------------------
	DECLARE
		SCODE NUMBER(6);
		CODE NUMBER(6);
		NAME VARCHAR(30);
		DEPT_CODE NUMBER(2);
		MANAGER VARCHAR(30);
	BEGIN
		GET_MANAGER(&SCODE,CODE,NAME,DEPT_CODE,MANAGER);
		DBMS_OUTPUT.PUT_LINE(CODE||'  '||NAME||'  '||DEPT_CODE||'  '||MANAGER);
	END;
	
5.	CREATE OR REPLACE FUNCTION GET_COMPANYCOST(CODE NUMBER)
	RETURN NUMBER AS
	COST NUMBER(5);
	SALARY NUMBER(5);
	HIRE DATE;
	EXP NUMBER(2);
	BEGIN
		COST:=0;
		SELECT STAFF_SAL, HIREDATE INTO SALARY,HIRE FROM STAFF_MASTER WHERE STAFF_CODE=CODE;
		EXP:=(SYSDATE-HIRE)/365;
		COST:=COST+0.15*SALARY+0.20*SALARY+0.08*SALARY;
		IF EXP>4 THEN
			COST:=COST+0.3*SALARY;
			ELSE IF EXP>=2 AND EXP<4 THEN
					COST:=COST+0.2*SALARY;
					ELSE IF EXP>=1 AND EXP<2 THEN
						COST:=COST+0.1*SALARY;
						END IF;
				END IF;
		END IF;
		RETURN COST;
	END;
	--------------------------------------------
	DECLARE 
	COST NUMBER(6);
	BEGIN
		COST:=GET_COMPANYCOST('&CODE');
		DBMS_OUTPUT.PUT_LINE(COST);
	END;
	
6.	CREATE OR REPLACE PROCEDURE GET_STATUS
	AS
		CODE STAFF_MASTER.STAFF_CODE%TYPE;
		NAME STAFF_MASTER.STAFF_NAME%TYPE;
		DNAME DEPARTMENT_MASTER.DEPT_NAME%TYPE;
		DESIGNATION DESIGNATION_MASTER.DESIGN_NAME%TYPE;
		SALARY STAFF_MASTER.STAFF_SAL%TYPE;
		DCODE STAFF_MASTER.DEPT_CODE%TYPE;
		
		avgSal NUMBER(5);
		STATUS varchar(7);
		
	CURSOR C IS SELECT S.STAFF_NAME, D.DEPT_NAME, DE.DESIGN_NAME, S.STAFF_SAL, S.DEPT_CODE
				FROM STAFF_MASTER S, DEPARTMENT_MASTER D, DESIGNATION_MASTER DE
				WHERE S.DEPT_CODE=D.DEPT_CODE
					AND S.DESIGN_CODE=DE.DESIGN_CODE;
	BEGIN
		OPEN C;
		FETCH C INTO NAME, DNAME, DESIGNATION, SALARY, DCODE;
		IF C%ROWCOUNT>0 THEN
			DBMS_OUTPUT.PUT_LINE(C%ROWCOUNT);
		ELSE 
			DBMS_OUTPUT.PUT_LINE('NOT EXISTS');
		END IF;
		WHILE C%FOUND
			LOOP
				FETCH C INTO NAME, DNAME, DESIGNATION, SALARY, DCODE;
				SELECT AVG(STAFF_SAL) INTO avgSal
				FROM STAFF_MASTER
				WHERE DEPT_CODE=DCODE
				GROUP BY DEPT_CODE;
				
				IF avgSal>SALARY THEN
					STATUS:='LESSER';
					ELSE IF avgSal<SALARY THEN
							STATUS:='GREATER';
						ELSE
							STATUS:='EQUAL';
						END IF;
				END IF;
				DBMS_OUTPUT.PUT_LINE(NAME||'  '||DNAME||'  '||DESIGNATION||'  '||SALARY||' avgsal:'||avgSal||'  '||STATUS);
			END LOOP;
		CLOSE C;
	END GET_STATUS;
	--------------------------------------------
	BEGIN
		GET_STATUS;
	END;
	
7.	CREATE OR REPLACE PROCEDURE UPDATE_SAL(CODE IN NUMBER)
	AS
	HIRE DATE;
	SALARY NUMBER(6);
	EXP NUMBER(2);
	BEGIN
		SELECT HIREDATE, STAFF_SAL INTO HIRE, SALARY
		FROM STAFF_MASTER
		WHERE STAFF_CODE=CODE;
		EXP:=(SYSDATE-HIRE)/365;
		
		DBMS_OUTPUT.PUT_LINE(CODE||'  '||EXP||'  '||SALARY);
		IF EXP>2 AND EXP<5 THEN
			UPDATE STAFF_MASTER_BACK
			SET STAFF_SAL=1.2*STAFF_SAL;
			SALARY:=1.2*SALARY;
			ELSE IF EXP>5 THEN
				UPDATE STAFF_MASTER_BACK
				SET STAFF_SAL=1.25*STAFF_SAL;
				SALARY:=1.25*SALARY;
				END IF;
		END IF;
		DBMS_OUTPUT.PUT_LINE(CODE||'  '||EXP||'  '||SALARY);
	END;
	--------------------------------------------------------------
	DECLARE 
	CODE NUMBER(6);
	BEGIN
		UPDATE_SAL(&CODE);
	END;
	
8.	CREATE OR REPLACE PROCEDURE GET_FINE_LIST(BCODE NUMBER)
	AS 
	STUDENTCODE NUMBER(6);
	STAFFCODE NUMBER(8);
	NAME VARCHAR(30);
	DESIG VARCHAR(30);
	ISSUE_DATE DATE;
	RETURN_DATE DATE;
	ACT_RETURN_DATE DATE;
	
	CURSOR C IS SELECT BT.STUDENT_CODE, BT.STAFF_CODE, BT.BOOK_ISSUE_DATE, BT.BOOK_EXPECTED_RETURN_DATE, BT.BOOK_ACTUAL_RETURN_DATE
				FROM BOOK_TRANSACTION BT
				WHERE BT.BOOK_CODE=BCODE;			
	BEGIN
		OPEN C;
		FETCH C INTO STUDENTCODE, STAFFCODE, ISSUE_DATE, RETURN_DATE, ACT_RETURN_DATE;
		WHILE C%FOUND
		LOOP
			FETCH C INTO STUDENTCODE, STAFFCODE, ISSUE_DATE, RETURN_DATE, ACT_RETURN_DATE;
			DBMS_OUTPUT.PUT_LINE(STAFFCODE||'  '||STUDENTCODE);
			
			IF ACT_RETURN_DATE IS NULL THEN
				IF STAFFCODE IS NULL THEN
					SELECT S.STUDENT_NAME INTO NAME
					FROM STUDENT_MASTER S
					WHERE S.STUDENT_CODE=STUDENTCODE;
					DBMS_OUTPUT.PUT_LINE(STUDENTCODE||'  '||NAME||'  '||ISSUE_DATE||'  STUDENT  '||RETURN_DATE);
				ELSE
					SELECT S.STAFF_NAME, D.DESIGN_NAME INTO NAME, DESIG
					FROM STAFF_MASTER S, DESIGNATION_MASTER D
					WHERE S.STAFF_CODE=STAFFCODE
						AND S.DESIGN_CODE=D.DESIGN_CODE;
					DBMS_OUTPUT.PUT_LINE(STAFFCODE||'  '||NAME||'  '||ISSUE_DATE||'  '||DESIG||'  '||RETURN_DATE);
				END IF;
			END IF;
		END LOOP;
		CLOSE C;
	END GET_FINE_LIST;
	---------------------------------------------------------------------
	BEGIN
		GET_FINE_LIST(&BCODE);
	END;
	
9.	

10.	CREATE OR REPLACE PROCEDURE INSERT_DETAILS(BCODE NUMBER, PCODE NUMBER)
	AS
	DOI DATE;
	DOR DATE;
	BEGIN
		DOI:=SYSDATE;
		DOR:=SYSDATE+10;
		IF(TO_CHAR(DOR,'DY')='SAT') THEN
			DOR:=DOR+2;
		ELSIF(TO_CHAR(DOR,'DY')='SUN') THEN
				DOR:=DOR+1;
		END IF;
		
		IF(PCODE>9999) THEN
			INSERT INTO BOOK_TRANSACTION
			VALUES(BCODE,NULL,PCODE,DOI,DOR,NULL);
		ELSE
			INSERT INTO BOOK_TRANSACTION
			VALUES(BCODE,PCODE,NULL,DOI,DOR,NULL);
		END IF;
	END;
-----------------------------------------------------------	
	BEGIN
		INSERT_DETAILS(&BCODE,&PCODE);
	END;