                                           LAB 3

3.1.  /*USING EQUIJOIN*/

	SELECT SM.STAFF_NAME, SM.DEPT_CODE,D.DEPT_NAME, SM.STAFF_SAL
	FROM STAFF_MASTER SM, DEPARTMENT_MASTER D
	WHERE SM.DEPT_CODE=D.DEPT_CODE
	AND SM.STAFF_SAL>20000
	/

3.2.  /*USING SELF JOIN*/
	
	select sm.staff_code STAFF#, sm.staff_name STAFF, m.mgr_code MGR#,
	m.staff_name MGR
	from staff_master sm, staff_master m
	where (sm.staff_code=m.mgr_code)
	/
	
3.3. SELECT S.STUDENT_CODE, SM.STUDENT_NAME, D.DEPT_NAME, S.SUBJECT1, S.SUBJECT2, S.SUBJECT3
	 FROM STUDENT_MARKS S, STUDENT_MASTER SM, DEPARTMENT_MASTER D
     WHERE (D.DEPT_CODE IN (10,20))
     AND (D.DEPT_CODE=SM.DEPT_CODE) AND (SM.STUDENT_CODE=S.STUDENT_CODE)
	 AND S.SUBJECT1>60
	 AND S.SUBJECT2>60
	 AND S.SUBJECT3>60
	 /

3.4. SELECT BT.STUDENT_CODE, SM.STUDENT_NAME, BT.BOOK_CODE, BM.BOOK_NAME
	  FROM BOOK_MASTER BM, BOOK_TRANSACTION BT. STUDENT_MASTER SM
	  WHERE (BT.STUDENT_CODE=SM.STUDENT_CODE)
		AND(BT.BOOK_CODE=BM.BOOK_CODE)
		AND(BT.BOOK_EXPECTED_RETURN_DATE=SYSDATE)
	/

3.5. SELECT SM.STAFF_CODE, SM.STAFF_NAME, D.DEPT_NAME, DM.DESIGN_NAME, BM.BOOK_CODE, BM.BOOK_NAME, BT.BOOK_ISSUE_DATE
   FROM BOOK_TRANSACTION BT, BOOK_MASTER BM, DESIGNATION_MASTER DM, DEPARTMENT_MASTER D, STAFF_MASTER SM
   WHERE (BM.BOOK_CODE=BT.BOOK_CODE)
   AND(DM.DESIGN_CODE=SM.DESIGN_CODE)
   AND(D.DEPT_CODE=SM.DEPT_CODE)
   AND(SM.STAFF_CODE=BT.STAFF_CODE)
   AND(BT.BOOK_ISSUE_DATE BETWEEN SYSDATE AND (SYSDATE-30))
   /
 
3.6.SELECT DISTINCT BT.BOOK_CODE, BM.BOOK_NAME
	FROM BOOK_TRANSACTION BT, BOOK_MASTER BM
	WHERE BT.BOOK_CODE=BM.BOOK_CODE
	/
	
3.7. SELECT SM.STAFF_CODE, SM.STAFF_NAME, DM.DESIGN_NAME, DEM.DEPT_NAME
	FROM STAFF_MASTER SM, DESIGNATION_MASTER DM, DEPARTMENT_MASTER DEM
	WHERE (SM.DESIGN_CODE=DM.DESIGN_CODE)
	 AND(SM.DEPT_CODE=DEM.DEPT_CODE)
	 AND (DM.DESIGN_NAME!='HOD')
	 /
3.8.
3.9.   SELECT SM.STAFF_CODE, SM.STAFF_NAME, DEM.DESIGN_NAME, DM.DEPT_NAME, BM.BOOK_NAME, BM.BOOK_CODE,
     BM.BOOK_PUB_AUTHOR,
	 (5*((SYSDATE-BT.BOOK_EXPECTED_RETURN_DATE)/365)) AS "FINE"
     FROM STAFF_MASTER SM, DESIGNATION_MASTER DEM, DEPARTMENT_MASTER DM, BOOK_MASTER BM,
      BOOK_TRANSACTION BT
   WHERE (DEM.DESIGN_CODE=SM.DESIGN_CODE)
     AND(DM.DEPT_CODE=SM.DEPT_CODE)
  AND(SM.STAFF_CODE=BT.STAFF_CODE)
  AND(BM.BOOK_CODE=BT.BOOK_CODE)
  AND(BT.BOOK_ACTUAL_RETURN_DATE IS NULL)
	/
	
3.10. SELECT SM.STAFF_CODE, SM.STAFF_NAME, SM.STAFF_SAL
	FROM STAFF_MASTER SM
	WHERE SM.STAFF_SAL<(SELECT AVG(STAFF_SAL) FROM STAFF_MASTER)
	/
	
3.11. SELECT SM.STAFF_CODE, SM.STAFF_NAME
	FROM STAFF_MASTER SM
	WHERE STAFF_CODE NOT IN(SELECT MGR_CODE FROM STAFF_MASTER)
    /
	
3.12. SELECT BM.BOOK_NAME, BM.BOOK_PUB_AUTHOR
    FROM BOOK_MASTER BM
	WHERE BOOK_PUB_AUTHOR IN (SELECT BOOK_PUB_AUTHOR
									FROM BOOK_MASTER
									GROUP BY BOOK_PUB_AUTHOR
									HAVING COUNT(BOOK_PUB_AUTHOR)>1)
									/
	
	
	
3.13. SELECT SM.STAFF_CODE, SM.STAFF_NAME,DEP.DEPT_CODE, BT.BOOK_CODE
	FROM STAFF_MASTER SM, DEPARTMENT_MASTER DEP, BOOK_TRANSACTION BT
	WHERE(SM.DEPT_CODE=DEP.DEPT_CODE)
	     AND(SM.STAFF_CODE=BT.STAFF_CODE)
		 AND SM.STAFF_CODE IN (SELECT STAFF_CODE FROM BOOK_TRANSACTION
										GROUP BY STAFF_CODE HAVING COUNT(STAFF_CODE)>1)
										/
										
										
3.14.. SELECT STD.STUDENT_CODE, STD.STUDENT_NAME, D.DEPT_NAME, SM.SUBJECT1, SM.SUBJECT1, SM.SUBJECT3
     (SM.SUBJECT1+ SM.SUBJECT2+ SM.SUBJECT3) TOTAL
		FROM STUDENT_MASTER STD, DEPARTMENT_MASTER D, 
		(SELECT DISTINCT(STUDENT_CODE), STUDENT_YEAR, SUBJECT1, SUBJECT2, SUBJECT3 
										FROM STUDENT_MARKS
										WHERE ROWNUM<=10 ORDER BY (SUBJECT1+SUBJECT2+SUBJECT3) DESC) SM
											WHERE D.DEPT_NAME='COMPUTER SCIENCE' AND
											STD.STUDENT_CODE=SM.STUDENT_CODE;
													

3.15. A) SELECT S.STAFF_NAME, D.DEPT_NAME, S.STAFF_SAL
		FROM STAFF_MASTER S, DEPARTMENT_MASTER D
		WHERE S.DEPT_cODE=D.DEPT_CODE
		  AND S.STAFF_sAL<(SELECT AVG(STAFF_SAL)
							FROM STAFF_MASTER S1
							WHERE S.DEPT_CODE=S1.DEPT_CODE
							GROUP BY DEPT_CODE)
							/
						
    B) SELECT S.STAFF_CODE, S.STAFF_NAME, ROUND((SYSDATE-HIREDATE)/365) EXPERIENCE
       FROM STAFF_MASTER S, DESIGNATION_MASTER D
		WHERE S.DESIGN_CODE=D.DESIGN_CODE
		AND D.DESIGN_NAME IN('Professor','Lecturer');

3.16. 		
3.17.  SELECT SM.STUDENT_CODE, SM.STUDENT_NAME
		FROM STUDENT_MASTER SM
		WHERE SM.STUDENT_CODE IN(SELECT STUDENT_CODE FROM STUDENT_MARKS
                                 WHERE (SUBJECT1+SUBJECT2+SUBJECT3)=
								     (SELECT MAX(SUBJECT1+SUBJECT2+SUBJECT3) FROM STUDENT_MARKS));
									 
3.18.  SELECT S.STUDENT_CODE, S.STUDENT_NAME, D.DEPT_NAME, SC.COUNTER
		FROM DEPARTMENT_MASTER D, STUDENT_MASTER S, (SELECT DEPT_CODE, COUNT(STUDENT_NAME) "COUNTER"
														FROM STUDENT_MASTER
														GROUP BY DEPT_CODE
														ORDER BY COUNTER) SC
		 WHERE D.DPT_CODE=S.DEPT_CODE
		 AND SC.DEPT_CODE=S.DEPT_CODE
		 AND SC.COUNTER=5;
		 
3.19.  SELECT SM.STAFF_CODE, SM.STAFF_NAME, DE.DESIGN_NAME, D.DEPT_NAME
	 FROM STAFF_MASTER SM, DESIGNATION_MASTER DE, DEPARTMENT_MASTER D
	 WHERE SM.DESIGN_CODE=DE.DESIGN_CODE
	 AND SM.DEPT_CODE=D.DEPT_CODE
	 AND SYSDATE-SM.HIREDATE<100;
	 
3.20.  SELECT SM.STAFF_NAME MANAGER, SC.STRENGTH
      FROM STAFF_MASTER SM, (sELECT COUNT(DISTINCT STAFF_CODE) "STRENGTH", MGR_CODE MANAGER
				FROM STAFF_MASTER
				GROUP BY MGR_CODE) SC
			WHERE SC.MANAGER=SM.MGR_CODE;

3.21. SELECT BM.BOOK_CODE, BM.BOOK_NAME
      FROM BOOK_MASTER BM, BOOK_TRANSACTION BT
	   WHERE (BT.BOOK_ACTUAL_RETURN_DATE IS NULL)
	      AND (BT.BOOK_EXPECTED_RETURN_DATE=TO_DATE(NEXT_DAY(SYSDATE,'MONDAY')-7));
		  	
3.22. SELECT SM.DEPT_CODE CODE, COUNT(SM.STAFF_CODE) "NO. OF EMPLOYEES", (SELECT D.DEPT_NAME
																		  FROM DEPARTMENT_MASTER D
																		   WHERE D.DEPT_CODE=SM.DEPT_CODE) DEPARTMENT
	   FROM STAFF_MASTER SM
	   GROUP BY SM.DEPT_CODE
	   
3.23. SELECT MIN(SM.STAFF_SAL) "LS", SM.MGR_CODE, (SELECT S.STAFF_NAME
													FROM STAFF_MASTER S
													WHERE S.STAFF_CODE=SM.MGR_CODE) "MGR"
		FROM STAFF_MASTER SM
		GROUP BY MGR_CODE
		HAVING MIN(SM.STAFF_SAL)>=10000
		ORDER BY LS;
		
		

                                  LAB 3.2 SET OPERATORS

1. SELECT * FROM PREVIOUS_PRODUCTS UNION SELECT * FROM CURRENT_PRODUCTS;

2. SELECT * FROM PREVIOUS_PRODUCTS UNION ALL SELECT * FROM CURRENT_PRODUCTS;

3. SELECT * FORM PREVIOUS_PRODUCTS INTERSECT SELECT * FROM CURRENT_PRODUCTS;

4. SELECT * FROM PREVIOUS_PRODUCTS MINUS SELECT * FROM CURRENT_PRODUCTS;










